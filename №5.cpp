#include <iostream>   
#include <cmath>      
#include <iomanip>    
using namespace std;  

int main() 
{
    setlocale(LC_ALL, "ru"); 

    // Задаем диапазон изменения x и шаг
    double a = 0.1;  // Начальное значение x
    double b = 1.0;  // Конечное значение x
    double h = 0.1;  // Шаг изменения x

    const double PI = 3.141592653589793; // Значение числа Пи

    // Форматируем вывод чисел: фиксированное число знаков после запятой (6 знаков)
    cout << fixed << setprecision(6);

    // Выводим заголовок таблицы результатов
    cout << "-----------------------------------------------------------------------------" << endl;
    cout << "| №  |   x    |         Y(x)          |         S(x)          |    |Y - S|    |" << endl;
    cout << "-----------------------------------------------------------------------------" << endl;

    int index = 0; // Счетчик для нумерации строк

    // Цикл перебора значений x от a до b с шагом h
    for (double x = a; x <= b + 1e-9; x += h) 
    {
        // Вычисляем Y(x) по формуле:
        // Y(x) = exp( (cos(π/4))/4 * cos(x * sin(π/4)) )
        double Y = exp((cos(PI / 4.0) / 4.0) * cos(x * sin(PI / 4.0)));

        // Вычисляем S(x) как сумму ряда:
        // S(x) = ∑ (от k=0 до бесконечности) [ cos(k*π/4) · x^k / k! ]
        double S = 0.0;      // Инициализируем сумму ряда S(x)
        double term = 1.0;   // Первый член ряда для k=0: cos(0)=1, x^0=1, 0! = 1
        S += term;           // Добавляем первый член в сумму

        // Для итеративного вычисления последующих членов ряда сохраняем:
        double power = 1.0;      // Для вычисления x^k (начальное значение x^0 = 1)
        double factorial = 1.0;  // Для вычисления k! (начальное значение 0! = 1)

        const double epsilon = 1e-8; // Задаем точность, при которой прекращаем суммирование
        int k = 0; // Счетчик для номера текущего члена ряда

        // Суммируем члены ряда, пока очередной член не станет меньше epsilon по модулю
        while (fabs(term) > epsilon) 
        {
            k++;              // Переходим к следующему члену ряда
            power *= x;       // Итеративно вычисляем x^k: умножаем предыдущую степень на x
            factorial *= k;   // Итеративно вычисляем k!: умножаем предыдущий факториал на k
            // Вычисляем текущий член ряда:
            // term = cos(k*π/4) * x^k / k!
            term = cos(k * PI / 4.0) * power / factorial;
            S += term;        // Добавляем вычисленный член к сумме ряда S(x)
        }

        // Вычисляем абсолютную разность между Y(x) и S(x)
        double diff = fabs(Y - S);

        // Выводим строку таблицы с номером, значением x, Y(x), S(x) и разностью |Y - S|
        cout << "| " << setw(2) << index
            << " | " << setw(6) << x
            << " | " << setw(22) << Y
            << " | " << setw(22) << S
            << " | " << setw(12) << diff << " |" << endl;

        index++; // Увеличиваем номер строки
    }
    cout << "-----------------------------------------------------------------------------" << endl;
    return 0; 
}
